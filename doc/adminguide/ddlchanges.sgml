<!--  -->
<sect1 id="ddlchanges">
<title>Database Schema Changes (DDL)</title>

<indexterm>
 <primary>DDL changes</primary>
 <secondary>database schema changes</secondary>
</indexterm>

<para>When changes are made to the database schema,
<emphasis>e.g.</emphasis> - adding fields to a table, it is necessary
for this to be handled rather carefully, otherwise different nodes may
get rather deranged because they disagree on how particular tables are
built.</para>

<para>If you pass the changes through &slony1; via <xref
linkend="stmtddlscript"> (slonik) / &funddlscript; (stored function),
this allows you to be certain that the changes take effect at the same
point in the transaction streams on all of the nodes. This may not be 
important to you depending on the nature of your change.  You should still
make sure that no transactions are changing the tables that your script
uses while the EXECUTE SCRIPT command is running on the master.</para>

<para>It is essential to use <command>EXECUTE SCRIPT</command> if you
alter the names of tables or the namespace they reside in.  If you do not
then &slony1; will be unaware of the new table name.
</para>

<para>It's worth making a couple of comments on <quote>special
things</quote> about <xref linkend="stmtddlscript">:</para>

<itemizedlist>

<listitem><para>The script <emphasis>must not</emphasis> contain
transaction <command>BEGIN</command> or <command>END</command>
statements, as the script is already executed inside a transaction.
In &postgres; version 8, the introduction of nested transactions
changes this somewhat, but you must still remain aware that the
actions in the script are processed within the scope of a single
transaction whose <command>BEGIN</command> and <command>END</command>
you do not control.</para></listitem>

<listitem><para>If there is <emphasis>anything</emphasis> broken about
the script, or about how it executes on a particular node, this will
cause the <xref linkend="slon"> daemon for that node to panic and
crash.  You may see various expected messages (positive and negative)
in <xref linkend="ddllogs">.  If you restart the &lslon;, it will,
more likely than not, try to
<emphasis>repeat</emphasis> the DDL script, which will, almost
certainly, fail the second time in the same way it did the first time.
I have found this scenario to lead to a need to go to the
<quote>master</quote> node to delete the event from the
table <envar>sl_event</envar> in order to stop it from continuing to
fail.</para>

<para> The implication of this is that it is
<emphasis>vital</emphasis> that modifications not be made in a
haphazard way on one node or another.  The schemas must always stay in
sync.</para> </listitem>

<listitem><para> For &lslon; to, at that point, <quote>panic</quote>
is probably the
<emphasis>correct</emphasis> answer, as it allows the DBA to head over
to the database node that is broken, and manually fix things before
cleaning out the defective event and restarting
&lslon;.  You can be certain that the updates
made <emphasis>after</emphasis> the DDL change on the provider node
are queued up, waiting to head to the subscriber.  You don't run the
risk of there being updates made that depended on the DDL changes in
order to be correct.</para></listitem>


</itemizedlist>

<para>Unfortunately, this nonetheless implies that the use of the DDL
facility is somewhat fragile and fairly dangerous.  Making DDL changes
must not be done in a sloppy or cavalier manner.  If your applications
do not have fairly stable SQL schemas, then using &slony1; for
replication is likely to be fraught with trouble and frustration.  See
the section on <link linkend="locking"> locking issues </link> for
more discussion of related issues.</para>



<sect2><title> Testing DDL Changes </title>

<indexterm><primary> testing DDL changes </primary></indexterm>

<para> A method for testing DDL changes has been pointed out as a
likely <quote>best practice.</quote></para>

<para> You <emphasis>need</emphasis> to test DDL scripts in a
non-destructive manner.</para>

<para> The problem is that if nodes are, for whatever reason, at all
out of sync, replication is likely to fall over, and this takes place
at what is quite likely one of the most inconvenient times, namely the
moment when you wanted it to <emphasis> work. </emphasis></para>

<para> You may indeed check to see if schema scripts work well or
badly, by running them by hand, against each node, adding <command>
BEGIN; </command> at the beginning, and <command> ROLLBACK; </command>
at the end, so that the would-be changes roll back.</para>

<para> If this script works OK on all of the nodes, that suggests that
it should work fine everywhere if executed via &lslonik;.  If problems
are encountered on some nodes, that will hopefully allow you to fix
the state of affairs on those nodes so that the script
<emphasis>will</emphasis> run without error.

<warning> <para> If the SQL script contains a <command> COMMIT;
</command> somewhere before the <command> ROLLBACK; </command>, that
may allow changes to go in unexpectedly.  </para>
</warning></para>
</sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:"slony.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
