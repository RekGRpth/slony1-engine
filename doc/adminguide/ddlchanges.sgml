<sect1 id="ddlchanges"> <title/Database Schema Changes (DDL)/

<para>When changes are made to the database schema, <emphasis/e.g./ -
adding fields to a table, it is necessary for this to be handled
rather carefully, otherwise different nodes may get rather deranged
because they disagree on how particular tables are built.

<para>If you pass the changes through <productname/Slony-I/ via the
<command/EXECUTE SCRIPT/ (slonik) /
<function/ddlscript(set,script,node)/ (stored function), this allows
you to be certain that the changes take effect at the same point in
the transaction streams on all of the nodes.  That may not be too
important if you can take something of an outage to do schema changes,
but if you want to do upgrades that take place while transactions are
still winding their way through your systems, this is necessary.

<para>It's worth making a couple of comments on <quote/special things/
about <command/EXECUTE SCRIPT/:

<itemizedlist>

<listitem><para> The script must not contain transaction
<command>BEGIN</command> or <command>END</command> statements, as the
script is already executed inside a transaction.  In
<productname>PostgreSQL</productname> version 8, the introduction of
nested transactions may change this requirement somewhat, but you must
still remain aware that the actions in the script are wrapped inside a
transaction.</para></listitem>

<listitem><para> If there is <emphasis>anything</emphasis> broken
about the script, or about how it executes on a particular node, this
will cause the <link linkend="slon"> <application>slon</application>
</link> daemon for that node to panic and crash. If you restart the
node, it will, more likely than not, try to
<emphasis>repeat</emphasis> the DDL script, which will, almost
certainly, fail the second time just as it did the first time.  I have
found this scenario to lead to a need to go to the
<quote>master</quote> node to delete the event to stop it from
continuing to fail.</para></listitem>

<listitem><para> For <application>slon</application> to, at that
point, <quote>panic</quote> is probably the
<emphasis>correct</emphasis> answer, as it allows the DBA to head over
to the database node that is broken, and manually fix things before
cleaning out the defective event and restarting
<application>slon</application>.  You can be certain that the updates
made <emphasis>after</emphasis> the DDL change on the provider node
are queued up, waiting to head to the subscriber.  You don't run the
risk of there being updates made that depended on the DDL changes in
order to be correct.</para></listitem>

</itemizedlist>

<para>Unfortunately, this nonetheless implies that the use of the DDL
facility is somewhat fragile and fairly dangerous.  Making DDL changes
must not be done in a sloppy or cavalier manner.  If your applications
do not have fairly stable SQL schemas, then using
<productname>Slony-I</productname> for replication is likely to be
fraught with trouble and frustration.</para>

<para>There is an article on how to manage Slony-I schema changes
here:
<ulink url="http://www.varlena.com/varlena/GeneralBits/88.php">
Varlena General Bits</ulink></para>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
