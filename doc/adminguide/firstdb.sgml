<sect1 id="firstdb"><title/Replicating Your First Database/

<para>In this example, we will be replicating a brand new pgbench database.  The
mechanics of replicating an existing database are covered here, however we
recommend that you learn how Slony-I functions by using a fresh new
non-production database.

<para>The Slony-I replication engine is trigger-based, allowing us to
replicate databases (or portions thereof) running under the same
postmaster.

<para>This example will show how to replicate the pgbench database
running on localhost (master) to the pgbench slave database also
running on localhost (slave).  We make a couple of assumptions about
your PostgreSQL configuration:

<itemizedlist>
	<listitem><para> You have <option/tcpip_socket=true/ in your <filename/postgresql.conf/ and
	<listitem><para> You have enabled access in your cluster(s) via <filename/pg_hba.conf/
</itemizedlist>

<para> The <envar/REPLICATIONUSER/ needs to be a PostgreSQL superuser.  This is typically
postgres or pgsql.

<para>You should also set the following shell variables:

<itemizedlist>
<listitem><para> <envar/CLUSTERNAME/=slony_example
<listitem><para> <envar/MASTERDBNAME/=pgbench
<listitem><para> <envar/SLAVEDBNAME/=pgbenchslave
<listitem><para> <envar/MASTERHOST/=localhost
<listitem><para> <envar/SLAVEHOST/=localhost
<listitem><para> <envar/REPLICATIONUSER/=pgsql
<listitem><para> <envar/PGBENCHUSER/=pgbench
</itemizedlist>
<para>Here are a couple of examples for setting variables in common shells:

<itemizedlist>
<listitem><Para> bash, sh, ksh
	<command/export CLUSTERNAME=slony_example/
<listitem><Para> (t)csh:
	<command/setenv CLUSTERNAME slony_example/
</itemizedlist>

<para><warning><Para> If you're changing these variables to use
different hosts for <envar/MASTERHOST/ and <envar/SLAVEHOST/, be sure
<emphasis/not/ to use localhost for either of them.  This will result
in an error similar to the following:

<para><command>
ERROR  remoteListenThread_1: db_getLocalNodeId() returned 2 - wrong database?
</command>
</warning></para>

<sect2><title/ Creating the pgbenchuser/

<para><command>
createuser -A -D $PGBENCHUSER
</command>

<sect2><title/ Preparing the databases/

<programlisting>
createdb -O $PGBENCHUSER -h $MASTERHOST $MASTERDBNAME
createdb -O $PGBENCHUSER -h $SLAVEHOST $SLAVEDBNAME
pgbench -i -s 1 -U $PGBENCHUSER -h $MASTERHOST $MASTERDBNAME
</programlisting>

<para>Because Slony-I depends on the databases having the pl/pgSQL procedural
language installed, we better install it now.  It is possible that you have
installed pl/pgSQL into the template1 database in which case you can skip this
step because it's already installed into the $MASTERDBNAME.

<programlisting>
createlang plpgsql -h $MASTERHOST $MASTERDBNAME
</programlisting>

<para>Slony-I does not yet automatically copy table definitions from a
master when a slave subscribes to it, so we need to import this data.
We do this with <application/pg_dump/.

<programlisting>
pg_dump -s -U $REPLICATIONUSER -h $MASTERHOST $MASTERDBNAME | psql -U $REPLICATIONUSER -h $SLAVEHOST $SLAVEDBNAME
</programlisting>

<para>To illustrate how Slony-I allows for on the fly replication
subscription, let's start up <application/pgbench/.  If you run the
<application/pgbench/ application in the foreground of a separate
terminal window, you can stop and restart it with different parameters
at any time.  You'll need to re-export the variables again so they are
available in this session as well.

<para>The typical command to run <application/pgbench/ would look like:

<programlisting>
pgbench -s 1 -c 5 -t 1000 -U $PGBENCHUSER -h $MASTERHOST $MASTERDBNAME
</programlisting>

<para>This will run <application/pgbench/ with 5 concurrent clients
each processing 1000 transactions against the pgbench database running
on localhost as the pgbench user.

<sect2><title/ Configuring the Database for Replication./

<para>Creating the configuration tables, stored procedures, triggers
and configuration is all done through the slonik tool.  It is a
specialized scripting aid that mostly calls stored procedures in the
master/slave (node) databases.  The script to create the initial
configuration for the simple master-slave setup of our pgbench
database looks like this:

<programlisting>
#!/bin/sh

slonik <<_EOF_
	#--
	 # define the namespace the replication system uses in our example it is
	 # slony_example
	#--
	cluster name = $CLUSTERNAME;

	#--
	 # admin conninfo's are used by slonik to connect to the nodes one for each
	 # node on each side of the cluster, the syntax is that of PQconnectdb in
	 # the C-API
	# --
	node 1 admin conninfo = 'dbname=$MASTERDBNAME host=$MASTERHOST user=$REPLICATIONUSER';
	node 2 admin conninfo = 'dbname=$SLAVEDBNAME host=$SLAVEHOST user=$REPLICATIONUSER';

	#--
	 # init the first node.  Its id MUST be 1.  This creates the schema
	 # _$CLUSTERNAME containing all replication system specific database
	 # objects.

	#--
	init cluster ( id=1, comment = 'Master Node');
 
	#--
	 # Because the history table does not have a primary key or other unique
	 # constraint that could be used to identify a row, we need to add one.
	 # The following command adds a bigint column named
	 # _Slony-I_$CLUSTERNAME_rowID to the table.  It will have a default value
	 # of nextval('_$CLUSTERNAME.s1_rowid_seq'), and have UNIQUE and NOT NULL
	 # constraints applied.  All existing rows will be initialized with a
	 # number
	#--
	table add key (node id = 1, fully qualified name = 'public.history');

	#--
	 # Slony-I organizes tables into sets.  The smallest unit a node can
	 # subscribe is a set.  The following commands create one set containing
	 # all 4 pgbench tables.  The master or origin of the set is node 1.
	#--
	create set (id=1, origin=1, comment='All pgbench tables');
	set add table (set id=1, origin=1, id=1, fully qualified name = 'public.accounts', comment='accounts table');
	set add table (set id=1, origin=1, id=2, fully qualified name = 'public.branches', comment='branches table');
	set add table (set id=1, origin=1, id=3, fully qualified name = 'public.tellers', comment='tellers table');
	set add table (set id=1, origin=1, id=4, fully qualified name = 'public.history', comment='history table', key = serial);

	#--
	 # Create the second node (the slave) tell the 2 nodes how to connect to
	 # each other and how they should listen for events.
	#--

	store node (id=2, comment = 'Slave node');
	store path (server = 1, client = 2, conninfo='dbname=$MASTERDBNAME host=$MASTERHOST user=$REPLICATIONUSER');
	store path (server = 2, client = 1, conninfo='dbname=$SLAVEDBNAME host=$SLAVEHOST user=$REPLICATIONUSER');
	store listen (origin=1, provider = 1, receiver =2);
	store listen (origin=2, provider = 2, receiver =1);
_EOF_
</programlisting>

<para>Is the pgbench still running?  If not start it again.

<para>At this point we have 2 databases that are fully prepared.  One
is the master database in which bgbench is busy accessing and changing
rows.  It's now time to start the replication daemons.

<para>On $MASTERHOST the command to start the replication engine is

<programlisting>
slon $CLUSTERNAME "dbname=$MASTERDBNAME user=$REPLICATIONUSER host=$MASTERHOST"
</programlisting>

<para>Likewise we start the replication system on node 2 (the slave)

<programlisting>
slon $CLUSTERNAME "dbname=$SLAVEDBNAME user=$REPLICATIONUSER host=$SLAVEHOST"
</programlisting>

<para>Even though we have the <application/slon/ running on both the
master and slave, and they are both spitting out diagnostics and other
messages, we aren't replicating any data yet.  The notices you are
seeing is the synchronization of cluster configurations between the 2
<application/slon/ processes.

<para>To start replicating the 4 pgbench tables (set 1) from the
master (node id 1) the the slave (node id 2), execute the following
script.

<programlisting>
#!/bin/sh
slonik <<_EOF_
	 # ----
	 # This defines which namespace the replication system uses
	 # ----
	 cluster name = $CLUSTERNAME;

	 # ----
	 # Admin conninfo's are used by the slonik program to connect
	 # to the node databases.  So these are the PQconnectdb arguments
	 # that connect from the administrators workstation (where
	 # slonik is executed).
	 # ----
	 node 1 admin conninfo = 'dbname=$MASTERDBNAME host=$MASTERHOST user=$REPLICATIONUSER';
	 node 2 admin conninfo = 'dbname=$SLAVEDBNAME host=$SLAVEHOST user=$REPLICATIONUSER';

	 # ----
	 # Node 2 subscribes set 1
	 # ----
	 subscribe set ( id = 1, provider = 1, receiver = 2, forward = no);
_EOF_
</programlisting>

<para>Any second now, the replication daemon on $SLAVEHOST will start
to copy the current content of all 4 replicated tables.  While doing
so, of course, the pgbench application will continue to modify the
database.  When the copy process is finished, the replication daemon
on <envar/$SLAVEHOST/ will start to catch up by applying the
accumulated replication log.  It will do this in little steps, 10
seconds worth of application work at a time.  Depending on the
performance of the two systems involved, the sizing of the two
databases, the actual transaction load and how well the two databases
are tuned and maintained, this catchup process can be a matter of
minutes, hours, or eons.

<para>You have now successfully set up your first basic master/slave
replication system, and the 2 databases should, once the slave has
caught up, contain identical data.  That's the theory, at least.  In
practice, it's good to build confidence by verifying that the datasets
are in fact the same.

<para>The following script will create ordered dumps of the 2 databases and compare
them.  Make sure that pgbench has completed it's testing, and that your slon
sessions have caught up.

<programlisting>
#!/bin/sh
echo -n "**** comparing sample1 ... "
psql -U $REPLICATIONUSER -h $MASTERHOST $MASTERDBNAME >dump.tmp.1.$$ <<_EOF_
	 select 'accounts:'::text, aid, bid, abalance, filler
		  from accounts order by aid;
	 select 'branches:'::text, bid, bbalance, filler
		  from branches order by bid;
	 select 'tellers:'::text, tid, bid, tbalance, filler
		  from tellers order by tid;
	 select 'history:'::text, tid, bid, aid, delta, mtime, filler,
		  "_Slony-I_${CLUSTERNAME}_rowID"
		  from history order by "_Slony-I_${CLUSTERNAME}_rowID";
_EOF_
psql -U $REPLICATIONUSER -h $SLAVEHOST $SLAVEDBNAME >dump.tmp.2.$$ <<_EOF_
	 select 'accounts:'::text, aid, bid, abalance, filler
		  from accounts order by aid;
	 select 'branches:'::text, bid, bbalance, filler
		  from branches order by bid;
	 select 'tellers:'::text, tid, bid, tbalance, filler
		  from tellers order by tid;
	 select 'history:'::text, tid, bid, aid, delta, mtime, filler,
		  "_Slony-I_${CLUSTERNAME}_rowID"
		  from history order by "_Slony-I_${CLUSTERNAME}_rowID";
_EOF_

if diff dump.tmp.1.$$ dump.tmp.2.$$ >$CLUSTERNAME.diff ; then
	 echo "success - databases are equal."
	 rm dump.tmp.?.$$
	 rm $CLUSTERNAME.diff
else
	 echo "FAILED - see $CLUSTERNAME.diff for database differences"
fi
</programlisting>

<para>Note that there is somewhat more sophisticated documentation of
the process in the Slony-I source code tree in a file called
slony-I-basic-mstr-slv.txt.

<para>If this script returns "FAILED" please contact the developers at
<ulink url="http://slony.org/"> http://slony.org/</ulink>


<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->

