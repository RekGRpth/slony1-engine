%META:TOPICINFO{author="guest" date="1099541541" format="1.0" version="1.2"}%
%META:TOPICPARENT{name="SlonyFAQ"}%
---++ Some events moving around, but no replication

Slony logs might look like the following:

<verbatim>
DEBUG1 remoteListenThread_1: connected to 'host=host004 dbname=pgbenchrep user=postgres port=5432'
ERROR  remoteListenThread_1: "select ev_origin, ev_seqno, ev_timestamp,		  ev_minxid, ev_maxxid, ev_xip,		  ev_type,		  ev_data1, ev_data2,		  ev_data3, ev_data4,		  ev_data5, ev_data6,		  ev_data7, ev_data8 from "_pgbenchtest".sl_event e where (e.ev_origin = '1' and e.ev_seqno > '1') order by e.ev_origin, e.ev_seqno" - could not receive data from server: Operation now in progress
</verbatim>

On AIX and Solaris (and possibly elsewhere), both Slony-I _and PostgreSQL_ must be compiled with the --enable-thread-safety option.  The above results when PostgreSQL isn't so compiled.

What breaks here is that the libc (threadsafe) and libpq (non-threadsafe) use different memory locations for errno, thereby leading to the request failing.

Problems like this crop up with disadmirable regularity on AIX and Solaris; it may take something of an "object code audit" to make sure that _ALL_ of the necessary components have been compiled and linked with --enable-thread-safety.

For instance, I ran into the problem one that LD_LIBRARY_PATH had been set, on Solaris, to point to libraries from an old PostgreSQL compile.
That meant that even though the database had been compiled with --enable-thread-safety, and slon had been compiled against that, slon was being dynamically linked to the "bad old thread-unsafe version," so slon didn't work.  It wasn't clear that this was the case until I ran "ldd" against slon.

