<sect1 id="dropthings"> <title/ Dropping things from Slony Replication/

<para>There are several things you might want to do involving dropping
things from <productname/Slony-I/ replication.

<sect2><title/ Dropping A Whole Node/

<para>If you wish to drop an entire node from replication, the <link
linkend="slonik"> slonik </link> command <command/DROP NODE/ should do
the trick.

<para>This will lead to <productname/Slony-I/ dropping the triggers
(generally that deny the ability to update data), restoring the
"native" triggers, dropping the schema used by <productname/Slony-I/,
and the slon process for that node terminating itself.

<para>As a result, the database should be available for whatever use
your application makes of the database.

<para>This is a pretty major operation, with considerable potential to
cause substantial destruction; make sure you drop the right node!

<para>The operation will fail if there are any nodes subscribing to
the node that you attempt to drop, so there is a bit of a failsafe to
protect you from errors.

<para><link linkend="FAQ17"> sl_log_1 isn't getting purged </link>
documents some extra maintenance that may need to be done on
sl_confirm if you are running versions prior to 1.0.5.

<sect2><title/ Dropping An Entire Set/

<para>If you wish to stop replicating a particular replication set,
the <link linkend="slonik"> slonik </link> command <command/DROP SET/
is what you need to use.

<para>Much as with <command/DROP NODE/, this leads to
<productname/Slony-I/ dropping the <productname/Slony-I/ triggers on
the tables and restoring <quote/native/ triggers.  One difference is
that this takes place on <emphasis/all/ nodes in the cluster, rather
than on just one node.  Another difference is that this does not clear
out the <productname/Slony-I/ cluster's namespace, as there might be
other sets being serviced.

<para>This operation is quite a bit more dangerous than <command/DROP
NODE/, as there <emphasis/isn't/ the same sort of <quote/failsafe./ If
you tell <command/DROP SET/ to drop the <emphasis/wrong/ set, there
isn't anything to prevent potentially career-limiting
<quote/unfortunate results./ Handle with care...

<sect2><title/ Unsubscribing One Node From One Set/

<para>The <command/UNSUBSCRIBE SET/ operation is a little less
invasive than either <command/DROP SET/ or <command/DROP NODE/; it
involves dropping <productname/Slony-I/ triggers and restoring
"native" triggers on one node, for one replication set.

<para>Much like with <command/DROP NODE/, this operation will fail if
there is a node subscribing to the set on this node.

<warning>
<para>For all of the above operations, <quote/turning replication back
on/ will require that the node copy in a <emphasis/full/ fresh set of
the data on a provider.  The fact that the data was recently being
replicated isn't good enough; <productname/Slony-I/ will expect to
refresh the data from scratch.
</warning>

<sect2><title/ Dropping A Table From A Set/

<para>In <productname/Slony-I/ 1.0.5 and above, there is a Slonik
command <command/SET DROP TABLE/ that allows dropping a single table
from replication without forcing the user to drop the entire
replication set.

<para>If you are running an earlier version, there is a <quote/hack/
to do this:

<para>You can fiddle this by hand by finding the table ID for the
table you want to get rid of, which you can find in sl_table, and then
run the following three queries, on each host:

<programlisting>
  select _slonyschema.alterTableRestore(40);
  select _slonyschema.tableDropKey(40);
  delete from _slonyschema.sl_table where tab_id = 40;
</programlisting>

<para>The schema will obviously depend on how you defined the
<productname/Slony-I/ cluster.  The table ID, in this case, 40, will
need to change to the ID of the table you want to have go away.

<para>You'll have to run these three queries on all of the nodes,
preferably firstly on the origin node, so that the dropping of this
propagates properly.  Implementing this via a <link linkend="slonik">
slonik </link> statement with a new <productname/Slony-I/ event would
do that.  Submitting the three queries using <command/EXECUTE SCRIPT/
could do that; see <link linkend="ddlchanges"> Database Schema Changes
</link> for more details.  Also possible would be to connect to each
database and submit the queries by hand.

<sect2><title/ Dropping A Sequence From A Set/

<para>Just as with <command/SET DROP TABLE/, version 1.0.5 introduces
the operation <command/SET DROP SEQUENCE/.

<para>If you are running an earlier version, here are instructions as
to how to drop sequences:

<para>The data that needs to be deleted to stop <productname/Slony-I/
from continuing to replicate the two sequences identified with
Sequence IDs 93 and 59 are thus:

<programlisting>
delete from _oxrsorg.sl_seqlog where seql_seqid in (93, 59);
delete from _oxrsorg.sl_sequence where seq_id in (93,59);
</programlisting>

<para> Those two queries could be submitted to all of the nodes via
<function>ddlscript()</function> / <command>EXECUTE SCRIPT</command>,
thus eliminating the sequence everywhere <quote>at once.</quote> Or
they may be applied by hand to each of the nodes.</para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode:sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"./reference.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->

