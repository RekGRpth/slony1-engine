<refentry id="app-slonik">
<refmeta>
    <refentrytitle id="app-slonik-title"><application>slonik</application></refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo>Application</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname><application id="slonik">slonik</application></refname>
    <refpurpose>
      <productname>Slony-I</productname> command processor
    </refpurpose>
  </refnamediv>

 <indexterm zone="app-slonik">
  <primary>slonik</primary>
 </indexterm>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>slonik</command>
   <arg><replaceable class="parameter">filename</replaceable>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

    <para>
     <application>slonik</application> is the command processor
     application that is used to set up and modify configurations of
     <productname>Slony-I</productname> replication clusters.
    </para>
 </refsect1>

 <refsect1><title> Outline</title>

  <para>The <application>slonik</application> command line utility is
  supposed to be used embedded into shell scripts and reads commands
  from files or stdin.</para>

  <para>It reads a set of Slonik statements, which are written in a
  scripting language with syntax similar to that of SQL, and performs
  the set of configuration changes on the slony nodes specified in the
  script.</para>

  <para>Nearly all of the real configuration work is actually done by
  calling stored procedures after loading the <productname/Slony-I/
  support base into a database.  <application/Slonik/ was created
  because these stored procedures have special requirements as to on
  which particular node in the replication system they are called.
  The absence of named parameters for stored procedures makes it
  rather hard to do this from the <application/psql/ prompt, and
  <application/psql/ lacks the ability to maintain multiple
  connections with open transactions to multiple databases.</para>

  <para>The format of the Slonik <quote/language/ is very similar to
  that of SQL, and the parser is based on a similar set of formatting
  rules for such things as numbers and strings.  Note that slonik is
  declarative, using literal values throughout, and does
  <emphasis>not</emphasis> have the notion of variables.  It is
  anticipated that Slonik scripts will typically be
  <emphasis>generated</emphasis> by scripts, such as Bash or Perl, and
  these sorts of scripting languages already have perfectly good ways
  of managing variables, doing iteration, and such.</para>
  
  <para>A detailed list of Slonik commands can be found here: <ulink
  url="http://gborg.postgresql.org/project/slony1/genpage.php?slonik_commands">
  slonik commands </ulink></para>

 </refsect1>

 <refsect1>
  <title>Exit Status</title>

  <para>
   <application>slonik</application> returns 0 to the shell if it
   finished normally.  Scripts may specify return codes.   
  </para>
 </refsect1>
</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:nil
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:"slony.sgml"
sgml-exposed-tags:nil
sgml-local-catalogs:"/usr/lib/sgml/catalog"
sgml-local-ecat-files:nil
End:
-->
