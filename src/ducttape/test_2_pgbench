#!/bin/sh

PATH=/usr/local/slony1/bin:$PATH
export PATH
TMPOUT=/tmp/output.$$
DB1=slony_test1
DB2=slony_test2
DB3=slony_test3

PGBENCH_SCALE=1
PGBENCH_CLIENTS=5
PGBENCH_TRANS=`expr 20000 / $PGBENCH_CLIENTS`

trap '
	echo ""
	echo "**** user abort"
	if [ ! -z $pgbench_pid ] ; then
		echo "**** killing pgbench"
		kill -15 $pgbench_pid
	fi
	if [ ! -z $slon1_pid ] ; then
		echo "**** killing node daemon 1"
		kill -15 $slon1_pid
	fi
	if [ ! -z $slon2_pid ] ; then
		echo "**** killing node daemon 2"
		kill -15 $slon2_pid
	fi
	if [ ! -z $slon3_pid ] ; then
		echo "**** killing node daemon 3"
		kill -15 $slon3_pid
	fi
	exit -1
' 2 15

######################################################################
# Preparations ... create a standalone pgbench database and
# have the "application" (pgbench) running.
######################################################################

#####
# Make sure the install is up to date
#####
echo -n "**** running 'gmake install' in src directory ... "
if ! gmake -C .. install >$TMPOUT 2>&1 ; then
    echo "failed"; cat $TMPOUT; rm $TMPOUT; exit -1
fi
echo "done"
rm $TMPOUT

#####
# Remove old databases, if they exist
#####
echo "**** remove old test databases"
dropdb $DB1 || echo "**** ignored"
sleep 1
dropdb $DB2 || echo "**** ignored"
sleep 1
dropdb $DB3 || echo "**** ignored"
sleep 1

#####
# Create the "Primary Node"
#####
echo "**** creating database for Node 1"

createdb $DB1 || exit -1
pgbench -i -s $PGBENCH_SCALE $DB1

#####
# Start pgbench in the background and give it rampup time
#####
pgbench -n -s $PGBENCH_SCALE -c $PGBENCH_CLIENTS -t $PGBENCH_TRANS $DB1 &
pgbench_pid=$!
echo "**** pgbench is running in background with pid $pgbench_pid"
echo -n "**** sleeping 10 seconds to give pgbench time for rampup ... "
sleep 10
echo "done"

echo ""
echo "**********************************************************************"
echo "**** $DB1 is now a standalone database with a running pgbench"
echo "**********************************************************************"
echo ""

######################################################################
# Setup DB1 as the primary cluster T1 node, start the node daemon,
# and create a replication set containing the pgbench tables.
######################################################################

echo "**** initializing $DB1 as Primary Node for Slony-I cluster T1"
if ! slony1_initcluster -f T1 "dbname=$DB1" "Primary node" ; then
	kill $pgbench_pid;
	exit -1
fi

echo "**** starting the Slony-I node deamon for $DB1"
xterm -title "Slon node 1" -e sh -c "slon T1 dbname=$DB1; echo -n 'Enter>'; read line" &
slon1_pid=$!
echo "slon[$slon1_pid] on dbname=$DB1"

echo "**** creating a replication set containing the 4 pgbench tables ... "
slony1_makeset T1 1 1 "pgbench tables" 			\
	1	public.accounts		"Table accounts"	\
	2	public.branches		"Table branches"	\
	3	public.tellers		"Table tellers"	\
	4	public.history		"Table history"	\

if [ $? -ne 0 ] ; then
	echo "failed"
	kill $pgbench_pid 2>/dev/null
	kill $slon1_pid 2>/dev/null
	cat $TMPOUT
	rm $TMPOUT
	exit -1
fi
echo "**** set created"

#####
# Check that pgbench is still running
#####
if ! kill -0 $pgbench_pid 2>/dev/null ; then
	echo "**** pgbench terminated ???"
	kill $slon1_pid 2>/dev/null
	exit -1
fi

echo ""
echo "**********************************************************************"
echo "**** $DB1 is now the Slony-I master for set 1"
echo "**********************************************************************"
echo ""

######################################################################
# Setup DB2 as a slave node and let it subscribe the replication
# set of the running pgbench
######################################################################
echo "**** creating database for Node 2"
if ! createdb $DB2 ; then
	kill $pgbench_pid 2>/dev/null
	kill $slon1_pid 2>/dev/null
	exit -1
fi

echo "**** initializing $DB2 as Node 2 of Slony-I cluster T1"
if ! slony1_addnode T1 1 2 dbname=$DB2 "Slave Node 2" ; then
	kill $pgbench_pid 2>/dev/null
	kill $slon1_pid 2>/dev/null
	exit -1
fi

echo "**** starting the Slony-I node deamon for $DB1"
xterm -title "Slon node 2" -e sh -c "slon T1 dbname=$DB2; echo -n 'Enter>'; read line" &
slon2_pid=$!
echo "slon[$slon2_pid] on dbname=$DB2"

#####
# Check that pgbench is still running
#####
if ! kill -0 $pgbench_pid 2>/dev/null ; then
	echo "**** pgbench terminated ???"
	kill $slon1_pid 2>/dev/null
	exit -1
fi

######################################################################
# And now comes the moment where the big elephant starts to pee
# and the attendants in the first row climb on their chairs ...
######################################################################
echo "**** creating pgbench tables and subscribing Node 2 to set 1"
(
	pg_dump -s -t accounts $DB1
	pg_dump -s -t branches $DB1
	pg_dump -s -t tellers $DB1
	pg_dump -s -t history $DB1
	echo "select \"_T1\".subscribeSet (1, 1, 2, true);"
) | psql -q $DB2

echo ""
echo "**********************************************************************"
echo "**** $DB2 should now be copying data and attempting to catch up."
echo "**********************************************************************"
echo ""

######################################################################
# Setup DB2 as a slave node and let it subscribe the replication
# set of the running pgbench
######################################################################
sleep 30
echo "**** creating database for Node 3"
if ! createdb $DB3 ; then
	kill $pgbench_pid 2>/dev/null
	kill $slon1_pid 2>/dev/null
	kill $slon2_pid 2>/dev/null
	exit -1
fi

echo "**** initializing $DB3 as Node 3 of Slony-I cluster T1"
if ! slony1_addnode T1 2 3 dbname=$DB3 "Slave Node 3" ; then
	kill $pgbench_pid 2>/dev/null
	kill $slon1_pid 2>/dev/null
	kill $slon2_pid 2>/dev/null
	exit -1
fi

echo "**** starting the Slony-I node deamon for $DB3"
xterm -title "Slon node 3" -e sh -c "slon T1 dbname=$DB3; echo -n 'Enter>'; read line" &
slon3_pid=$!
echo "slon[$slon3_pid] on dbname=$DB3"

#####
# Check that pgbench is still running
#####
if ! kill -0 $pgbench_pid 2>/dev/null ; then
	echo "**** pgbench terminated ???"
	kill $slon1_pid 2>/dev/null
	exit -1
fi

######################################################################
# Create the pgbench tables and subscribe to set 1
######################################################################
echo "**** creating pgbench tables and subscribing Node 2 to set 1"
(
	pg_dump -s -t accounts $DB2
	pg_dump -s -t branches $DB2
	pg_dump -s -t tellers $DB2
	pg_dump -s -t history $DB2
	echo "select \"_T1\".subscribeSet (1, 2, 3, false);"
) | psql -q $DB3

echo ""
echo "**********************************************************************"
echo "**** $DB3 should now be copying data and attempting to catch up."
echo "**********************************************************************"
echo ""



echo -n "**** waiting for pgbench to finish "
while kill -0 $pgbench_pid 2>/dev/null ; do
	echo -n "."
	sleep 10
done
echo "**** pgbench finished"
echo "**** please terminate the replication engines when cought up."
wait $slon1_pid
wait $slon2_pid
wait $slon3_pid

kill $pgbench_pid 2>/dev/null
kill $slon1_pid 2>/dev/null
kill $slon2_pid 2>/dev/null
kill $slon3_pid 2>/dev/null

echo -n "**** comparing databases ... "
psql $DB1 >dump.tmp.1.$$ <<_EOF_
	select 'accounts:'::text, aid, bid, abalance, filler
			from accounts order by aid;
	select 'branches:'::text, bid, bbalance, filler
			from branches order by bid;
	select 'tellers:'::text, tid, bid, tbalance, filler
			from tellers order by tid;
	select 'history:'::text, tid, bid, aid, delta, mtime, filler,
			"_Slony-I_T1_rowID" from history order by "_Slony-I_T1_rowID";
_EOF_
psql $DB2 >dump.tmp.2.$$ <<_EOF_
	select 'accounts:'::text, aid, bid, abalance, filler
			from accounts order by aid;
	select 'branches:'::text, bid, bbalance, filler
			from branches order by bid;
	select 'tellers:'::text, tid, bid, tbalance, filler
			from tellers order by tid;
	select 'history:'::text, tid, bid, aid, delta, mtime, filler,
			"_Slony-I_T1_rowID" from history order by "_Slony-I_T1_rowID";
_EOF_
psql $DB3 >dump.tmp.3.$$ <<_EOF_
	select 'accounts:'::text, aid, bid, abalance, filler
			from accounts order by aid;
	select 'branches:'::text, bid, bbalance, filler
			from branches order by bid;
	select 'tellers:'::text, tid, bid, tbalance, filler
			from tellers order by tid;
	select 'history:'::text, tid, bid, aid, delta, mtime, filler,
			"_Slony-I_T1_rowID" from history order by "_Slony-I_T1_rowID";
_EOF_

if diff dump.tmp.1.$$ dump.tmp.2.$$ >test_2.1-2.diff ; then
	echo "success - databases 1 and 2 are equal."
	rm dump.tmp.2.$$
	rm test_2.1-2.diff
else
	echo "FAILED - see test_2.1-2.diff for database differences"
fi
echo -n "**** comparing databases ... "
if diff dump.tmp.1.$$ dump.tmp.3.$$ >test_2.1-3.diff ; then
	echo "success - databases 1 and 3 are equal."
	rm dump.tmp.3.$$
	rm dump.tmp.1.$$
	rm test_2.1-3.diff
else
	echo "FAILED - see test_2.1-3.diff for database differences"
fi
