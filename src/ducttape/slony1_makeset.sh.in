#!@BASH_PATH@
# ----------------------------------------------------------------------
# slony1_makeset.sh.in
#
#	Shell script to create a set and add tables.
#
# $Id: slony1_makeset.sh.in,v 1.1 2004-03-03 00:54:23 wieck Exp $
# ----------------------------------------------------------------------

# ----
# Get commandline options
# ----
Errors=0

while true ; do
	case $1 in
		-*)	echo "unknown option $1" >&2
			shift
			Errors=1
			;;

		*)	break
			;;
	esac
done

# ----
# Check usage
# ----
if [ $# -lt 4 ] ; then
	echo "usage: `basename $0` cluster-name nodeid setid set_comment [tab_id tab_fqname tab_comment [, ...]]" >&2
	exit 1
fi

clustername="$1"
namespace="_$1"
no_id="$2"
set_id="$3"
set_comment="$4"
shift 4
libdir=@LIBDIR@

SLONY1_CLUSTERNAME="$clustername"
export SLONY1_CLUSTERNAME

# ----
# Get cluster information
# ----
CLUSTER_INFO=@LIBDIR@/ducttape_cluster_info-$SLONY1_CLUSTERNAME
if [ ! -f $CLUSTER_INFO ] ; then
	echo "ERROR: cluster $SLONY1_CLUSTERNAME not found" >&2
	exit 2
fi

# ----
# Source in common functions and override the eventually existing
# ducttape_cluster_info
# ----
. @LIBDIR@/slony1_common.sh

# ----
# Setup all conninfo strings we need and check if the nodes
# exist or not exist as required
# ----
conninfo_node=`get_conninfo_src $no_id 2>/dev/null`
if [ "$conninfo_node" = "" ] ; then
	echo "nodeid $no_id not found - abort" >&2
	exit 2
fi

function get_tab_attkind_index () {
	row=`psql -qAt $DBNAME <<_EOF_
		select x.indkey
			from pg_index x
			join pg_class c on c.oid = x.indrelid
			join pg_class i on i.oid = x.indexrelid
			left join pg_namespace n on n.oid = c.relnamespace
			where n.nspname || '.' || c.relname = '$1'
			and x.indisprimary;
_EOF_`
	if [ ! "x$row" = x ] ; then
		echo $row
		return 0
	fi

	row=`psql -qAt $DBNAME <<_EOF_
		select x.indkey
			from pg_index x
			join pg_class c on c.oid = x.indrelid
			join pg_class i on i.oid = x.indexrelid
			left join pg_namespace n on n.oid = c.relnamespace
			where n.nspname || '.' || c.relname = '$1'
			and x.indisunique
			limit 1;
_EOF_`
	if [ ! "x$row" = x ] ; then
		echo $row
		return 0
	fi
	
	echo "Warning: table $1 does not have a primary/unique key" >&2
	echo "Warning: will add unique attribute" >&2
	echo "-1"
	return 1
}

function get_tab_attkind () {
	ret=0
	indkey=`get_tab_attkind_index $1` || ret=1
	attnums=`psql -qAt $DBNAME <<_EOF_
		select a.attnum
		from pg_class c
		join pg_attribute a on a.attrelid = c.oid
		left join pg_namespace n on n.oid = c.relnamespace
		where n.nspname || '.' || c.relname = '$1'
		and a.attnum > 0
		and not a.attisdropped
		order by attnum;
_EOF_`

	attkind=""
	for att in $attnums ; do
		akind=""
		for iatt in $indkey ; do
			if [ $att -eq $iatt ] ; then
				akind=k
				break
			fi
		done
		test "x$akind" = x && akind=v
		attkind="${attkind}$akind"
	done

	echo $attkind
	return $ret
}

eval $conninfo_node

err=1
sql=/tmp/slony1_makeset.$$.sql
(
echo "start transaction;"

echo "select \"$namespace\".storeSet($set_id, '$set_comment');"

while [ ! -z $1 ] ; do
	tab_id=$1
	tab_fqname=$2
	tab_comment=$3
	shift 3

    tab_attkind=`get_tab_attkind "$tab_fqname"`

	if [ $? -ne 0 ] ; then
		echo "alter table $tab_fqname add column \"_Slony-I_T1_rowID\" bigint;"
		echo "alter table $tab_fqname alter column \"_Slony-I_T1_rowID\""
		echo "    set default \"pg_catalog\".nextval('\"$namespace\".sl_rowid_seq');"
		echo "update $tab_fqname"
		echo "    set \"_Slony-I_T1_rowID\" =  \"pg_catalog\".nextval('\"$namespace\".sl_rowid_seq');"
		echo "alter table $tab_fqname alter column \"_Slony-I_T1_rowID\""
		echo "    set not null;"
		echo "alter table $tab_fqname"
		echo "    add unique (\"_Slony-I_T1_rowID\");"

		tab_attkind="${tab_attkind}k"
	fi

	echo "select \"$namespace\".setAddTable($set_id, $tab_id, '$tab_fqname', '$tab_attkind', '$tab_comment');"
done

echo "commit transaction;"
) >$sql

if [ $? -ne 0 ] ; then
	rm -f $sql
	echo "Abort due to errors"
	exit 5
fi

err=1
cat $sql | psql -e $DBNAME | grep "^ERROR" || err=0
rm -f $sql

if [ $err -eq 0 ] ; then
	echo "New set created and tables added"
else
	exit 5
fi

