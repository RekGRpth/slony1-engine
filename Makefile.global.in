# ----------
# Makefile.global.in
#
#	configure input for Makefile.global
#
#	Copyright (c) 2003-2004, PostgreSQL Global Development Group
#	Author: Jan Wieck, Afilias USA INC.
#
# $Id: Makefile.global.in,v 1.8 2004-03-12 17:26:55 wieck Exp $
# ----------

##########################################################################
#
# Meta configuration

.PHONY: all install installdirs uninstall clean distclean maintainer-clean distprep check installcheck maintainer-check
.SILENT: installdirs

# make `all' the default target
all:

# Delete target files if the command fails after it has
# started to update the file.
.DELETE_ON_ERROR:

# Support for VPATH builds
abs_top_srcdir = 

ifndef abs_top_srcdir
top_srcdir = $(top_builddir)
srcdir = .
else
top_srcdir = $(abs_top_srcdir)
srcdir = $(top_srcdir)
endif


##########################################################################
#
# Configuration options
#
SLONY_I_MAXNODES := @slony_I_maxnodes@


##########################################################################
#
# Installation directories
#

prefix := @prefix@
exec_prefix := ${prefix}

bindir := ${exec_prefix}/bin
sbindir := ${exec_prefix}/sbin

basedir := ${prefix}
ifeq "$(findstring pgsql, $(basedir))" ""
ifeq "$(findstring postgres, $(basedir))" ""
override basedir := $(basedir)
endif
endif

libexecdir := ${exec_prefix}/libexec
ifeq "$(findstring pgsql, $(libexecdir))" ""
ifeq "$(findstring postgres, $(libexecdir))" ""
override libexecdir := $(libexecdir)
endif
endif

datadir := ${prefix}/share
ifeq "$(findstring pgsql, $(datadir))" ""
ifeq "$(findstring postgres, $(datadir))" ""
override datadir := $(datadir)
endif
endif

sysconfdir := ${prefix}/etc
ifeq "$(findstring pgsql, $(sysconfdir))" ""
ifeq "$(findstring postgres, $(sysconfdir))" ""
override sysconfdir := $(sysconfdir)
endif
endif

libdir := ${exec_prefix}/lib
pkglibdir = $(libdir)
ifeq "$(findstring pgsql, $(pkglibdir))" ""
ifeq "$(findstring postgres, $(pkglibdir))" ""
override pkglibdir := $(pkglibdir)
endif
endif

logdir := ${prefix}/log
pkglogdir = $(logdir)
ifeq "$(findstring pgsql, $(pkglogdir))" ""
ifeq "$(findstring postgres, $(pkglogdir))" ""
override pkglogdir := $(pkglogdir)
endif
endif

confdir := ${prefix}/conf
pkgconfdir = $(confdir)
ifeq "$(findstring pgsql, $(pkgconfdir))" ""
ifeq "$(findstring postgres, $(pkgconfdir))" ""
override pkgconfdir := $(pkgconfdir)
endif
endif

sqldir := ${prefix}/sql
pkgsqldir = $(sqldir)
ifeq "$(findstring pgsql, $(pkgsqldir))" ""
ifeq "$(findstring postgres, $(pkgsqldir))" ""
override pkgsqldir := $(pkgsqldir)
endif
endif

templdir := ${prefix}/templates
pkgtempldir = $(templdir)
ifeq "$(findstring pgsql, $(pkgtempldir))" ""
ifeq "$(findstring postgres, $(pkgtempldir))" ""
override pkgtempldir := $(pkgtempldir)
endif
endif

includedir := ${prefix}/include
pkgincludedir = $(includedir)
ifeq "$(findstring pgsql, $(pkgincludedir))" ""
ifeq "$(findstring postgres, $(pkgincludedir))" ""
override pkgincludedir := $(pkgincludedir)
endif
endif
includedir_server = $(pkgincludedir)/server
includedir_internal = $(pkgincludedir)/internal

mandir := ${prefix}/man
sqlmansect_dummy = l

docdir := ${prefix}/doc
ifeq "$(findstring pgsql, $(docdir))" ""
ifeq "$(findstring postgres, $(docdir))" ""
override docdir := $(docdir)
endif
endif

odbcinst_ini_dir = ${sysconfdir}

javadir := $(DESTDIR)$(datadir)/java
localedir := 


##########################################################################
#
# Programs and flags

# Compilers

CPP = cc -E
CPPFLAGS = 
override CPPFLAGS := -I$(top_builddir) -I${includedir} -I${includedir}/server $(CPPFLAGS)
ifdef VPATH
override CPPFLAGS := -I$(top_builddir) -I${includedir} -I${includedir}/server $(CPPFLAGS)
endif

CC = @CC@
GCC = yes
CFLAGS += -O -pipe 
ifeq ($(GCC), yes)
  CFLAGS += -Wall -Wmissing-prototypes -Wmissing-declarations
endif

CXX = c++
GXX = yes
CXXFLAGS =  -O -pipe 
ifeq ($(GXX), yes)
  CXXFLAGS += -Wall
endif

# Linking

LIBS = -lssl -lcrypto -lz -lcrypt -lcompat -lm -lutil -lreadline 
LD = @LD@
with_gnu_ld = @with_gnu_ld@
ld_R_works = 
LDFLAGS =  @LDFLAGS@ -L${libdir} -lpq
LDREL = -r
LDOUT = -o
RANLIB = ranlib
LORDER = lorder
X = 

# Miscellaneous

ANT	= 
LN_S	= ln -s

GZIP	= gzip
BZIP2	= bzip2

# Installation.

INSTALL	= $(SHELL) $(top_srcdir)/config/install-sh -c

INSTALL_PROGRAM	= $(INSTALL)
INSTALL_SCRIPT	= $(INSTALL) -m 755
INSTALL_DATA	= $(INSTALL) -m 644
INSTALL_SHLIB	= $(INSTALL) $(INSTALL_SHLIB_OPTS)

# Override in Makefile.port if necessary
INSTALL_SHLIB_OPTS = -m 755

mkinstalldirs	= $(SHELL) $(top_srcdir)/config/mkinstalldirs
missing		= $(SHELL) $(top_srcdir)/config/missing


##########################################################################
#
# Additional platform-specific settings
#

# This is mainly for use on FreeBSD, where we have both a.out and elf
# systems now.  May be applicable to other systems to?
ELF_SYSTEM= true

# Pull in platform-specific magic
include $(top_builddir)/Makefile.port

ifeq ($(enable_rpath), yes)
LDFLAGS += $(rpath)
endif

##########################################################################
#
# Some variables needed to find some client interfaces

libpq_srcdir = $(top_srcdir)/src/interfaces/libpq
libpq_builddir = $(top_builddir)/src/interfaces/libpq
libpq = -L$(libpq_builddir) -lpq


##########################################################################
#
# Customization
#
# This includes your local customizations if Makefile.custom exists
# in the source directory.  This file doesn't exist in the original
# distribution so that it doesn't get overwritten when you upgrade.

-include $(top_srcdir)/src/Makefile.custom

ifneq ($(CUSTOM_INSTALL),)
INSTALL= $(CUSTOM_INSTALL)
endif

ifneq ($(CUSTOM_CC),)
  CC= $(CUSTOM_CC)
endif

ifneq ($(CUSTOM_COPT),)
  COPT= $(CUSTOM_COPT)
endif

ifdef COPT
   CFLAGS+= $(COPT)
   LDFLAGS+= $(COPT)
endif

ifdef PROFILE
   CFLAGS+= $(PROFILE)
   LDFLAGS+= $(PROFILE)
endif


##########################################################################
#
# Global targets and rules

%.gz: %
	$(GZIP) -f --best $<

%.bz2: %
	$(BZIP2) -f $<

# How to substitute .sql.in files into .sql
%.sql:	%.sql.in
	sed -e "s:@LIBDIR@:$(libdir):g"		\
		-e "s:@DLSUFFIX@:$(DLSUFFIX):g"	$< >$@

# How to substitute .sh.in files into .sh
%.sh:	%.sh.in
	sed -e "s:@LIBDIR@:$(libdir):g"		\
		-e "s:\@BASH_PATH\@:@bash_path@:g"	$< >$@

# Remake Makefile.global from Makefile.global.in if the latter
# changed. In order to trigger this rule, the including file must
# write `include $(top_builddir)/src/Makefile.global', not some
# shortcut thereof.
$(top_builddir)/src/Makefile.global: $(top_srcdir)/src/Makefile.global.in $(top_builddir)/config.status
	cd $(top_builddir) && CONFIG_FILES=src/Makefile.global CONFIG_HEADERS= ./config.status

# When configure changes, rerun configure with the same options as
# last time. To change configure, you need to run autoconf manually.
$(top_builddir)/config.status: $(top_srcdir)/configure
	cd $(top_builddir) && ./config.status --recheck


##########################################################################
#
# Automatic dependency generation
# -------------------------------
# When we configure with --enable-depend then we override the default
# compilation rule with the magic below. While or after creating the
# actual output file we also create a dependency list for the .c file.
# Next time we invoke make we will have top-notch information about
# whether this file needs to be updated. The dependency files are kept
# in the .deps subdirectory of each directory.
#
# The sed command is necessary to post-process the dependency file:
# Each dependency file becomes a target of its own, without
# dependencies or commands. This is because if you happen to remove a
# file that is a dependency (say, you rename a header file) the
# dependency would point to a non-existing file and make would fail.
# But if the file is listed as a target of its own, without
# prerequisites and commands, and doesn't exist then make will
# consider it updated. (That in turn also has the nice side effect
# that make will update all files that depended on the now removed
# file.)

autodepend = 

ifeq ($(autodepend), yes)

ifndef COMPILE.c
COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) -c
endif

ifndef COMPILE.cc
COMPILE.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c
endif

DEPDIR = .deps
df = $(DEPDIR)/$(*F)

# This converts a .d file in the current directory to a .P file in the .deps
# subdirectory, with the dummy targets as explained above.
define postprocess-depend
@if test ! -d $(DEPDIR); then mkdir $(DEPDIR); fi
@cp $*.d $(df).P
@sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
     -e '/^$$/ d' -e 's/$$/ :/' < $*.d >> $(df).P
@rm -f $*.d
endef

ifeq ($(GCC), yes)

# GCC allows us to create object and dependency file in one invocation.
%.o : %.c
	$(COMPILE.c) -o $@ $< -MMD
	$(postprocess-depend)

endif # GCC

ifeq ($(GXX), yes)

%.o : %.cc
	$(COMPILE.cc) -o $@ $< -MMD
	$(postprocess-depend)

endif # GXX

# Include all the dependency files generated for the current
# directory. List /dev/null as dummy because if the wildcard expands
# to nothing then make would complain.
-include $(wildcard $(DEPDIR)/*.P) /dev/null

# hook for clean-up
clean distclean maintainer-clean: clean-deps

.PHONY: clean-deps
clean-deps:
	@rm -rf $(DEPDIR) *.d

endif # autodepend

